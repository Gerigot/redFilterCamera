{"version":3,"sources":["Slice/VideoSlice.js","stream/Stream.js","App.js","Slice/index.js","sagas/index.js","index.js"],"names":["VideoSlice","createSlice","name","initialState","hue","active","reducers","changeHue","state","payload","setActive","actions","reducer","Stream","videoEl","useRef","useState","undefined","stream","setStream","useEffect","a","constraints","audio","video","facingMode","navigator","mediaDevices","getUserMedia","streams","current","srcObject","openStream","getTracks","forEach","track","stop","ref","className","playsInline","autoPlay","App","dispatch","useDispatch","isActive","useSelector","activate","useCallback","onClick","start","saga","takeLatest","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","logger","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEMA,G,YAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,IAAK,EACLC,QAAQ,GAEZC,SAAU,CACNC,UAAW,SAACC,EAAD,GAAsB,IAAbC,EAAY,EAAZA,QAChBD,EAAMJ,IAAMK,GAEhBC,UAAW,SAACF,EAAD,GAAuB,IAAdC,EAAa,EAAbA,QAChBD,EAAMH,OAASI,OAMpBE,EAAoBX,EAApBW,QAASC,EAAWZ,EAAXY,QAESF,GAAaC,EAAxBJ,UAAwBI,EAAbD,WAEVE,I,sCCpBA,SAASC,IACpB,IAAMC,EAAUC,iBAAO,MADM,EAEDC,wBAASC,GAFR,mBAEtBC,EAFsB,KAEdC,EAFc,KA2B7B,OAvBAC,qBAAU,WAeN,OAdgB,uCAAG,8BAAAC,EAAA,6DACTC,EAAc,CAChBC,OAAO,EACPC,MAAO,CACHC,WAAY,gBAJL,SAOOC,UAAUC,aAAaC,aAAaN,GAP3C,OAOTO,EAPS,OAQfV,EAAUU,GACPf,IACCA,EAAQgB,QAAQC,UAAYF,GAVjB,2CAAH,oDAahBG,GACO,WACHd,GAAUA,EAAOe,YAAYC,SAAQ,SAASC,GAC1CA,EAAMC,aAInB,IAGK,uBAAOC,IAAKvB,EAASwB,UAAU,SAASC,aAAW,EAACC,UAAQ,ICFrDC,MAvBf,WACE,IAAMC,EAAWC,cACXC,EAAWC,aAAY,SAAArC,GAC5B,OAAOA,EAAMH,UAGRyC,EAAWC,uBACf,WACEL,EAAShC,GAAU,MAErB,CAACgC,IAEH,OACE,sCACEE,GAAY,qBAAKN,UAAU,SAASU,QAASF,EAAjC,yDACbF,GAAY,sBAAKN,UAAU,kBAAf,UACR,cAAC,EAAD,IACD,qBAAKA,UAAU,kBCtBRd,I,mBCALyB,G,WAKAC,GALV,SAAUD,IAAV,iGAKA,SAAUC,IAAV,iEACI,OADJ,SACUC,YAAW,QAASF,GAD9B,uCAIeC,QCCTE,EAAiBC,cAEjBC,EAAQC,YAAe,CAC3B3C,QAASN,EACTkD,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAON,GAAgBM,OAAOC,QAG7FP,EAAeQ,IAAIV,GAEnBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,W","file":"static/js/main.01c08d46.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nconst VideoSlice = createSlice({\n    name: \"video\",\n    initialState: {\n        hue: 0,\n        active: false\n    },\n    reducers: {\n        changeHue: (state, {payload}) =>{\n            state.hue = payload\n        },\n        setActive: (state, {payload}) => {\n            state.active = payload\n        }\n\n    }\n})\n\nconst {actions, reducer} = VideoSlice;\n\nexport const {changeHue, setActive} = actions\n\nexport default reducer;","import React, { useEffect, useRef, useState } from 'react'\nimport './Stream.css';\n\nexport default function Stream() {\n    const videoEl = useRef(null);\n    const [stream, setStream] = useState(undefined)\n\n    useEffect(() => {\n        const openStream = async () => {\n            const constraints = {\n                audio: false, \n                video: {\n                    facingMode: 'environment'\n                }\n            };\n            const streams = await navigator.mediaDevices.getUserMedia(constraints);\n            setStream(streams);\n            if(videoEl){\n                videoEl.current.srcObject = streams;\n            }\n        }\n        openStream()\n        return () => {\n            stream && stream.getTracks().forEach(function(track) {\n                track.stop();\n            });\n        }\n        // eslint-disable-next-line\n}, [])\n\n    return (\n        <video ref={videoEl} className=\"stream\" playsInline autoPlay></video>\n    )\n}\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport { setActive } from './Slice/VideoSlice';\nimport Stream from './stream/Stream';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isActive = useSelector(state => {\n   return state.active;\n  })\n\n  const activate = useCallback(\n    () => {\n      dispatch(setActive(true));\n    },\n    [dispatch],\n  )\n  return (\n    <>\n    {!isActive && <div className=\"button\" onClick={activate} >Clicca per attivare la videocamera filtrata</div>}\n    {isActive && <div className=\"containerStream\">\n         <Stream />\n        <div className=\"filter\"></div>\n    </div>}\n    </>\n  );\n}\n\nexport default App;\n","import video from './VideoSlice';\nexport default video;","import {takeLatest} from 'redux-saga/effects'\nfunction* start(){\n    \n}\n\n\nfunction* saga(){\n    yield takeLatest('START', start)\n}\n\nexport default saga;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger';\nimport  createSagaMiddleware  from 'redux-saga';\nimport './index.css';\nimport App from './App';\nimport reducers from './Slice';\nimport saga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: reducers,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware).concat(logger),\n})\n\nsagaMiddleware.run(saga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}