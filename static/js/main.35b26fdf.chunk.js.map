{"version":3,"sources":["slice/VideoSlice.js","stream/Stream.js","App.js","slice/index.js","sagas/index.js","index.js"],"names":["VideoSlice","createSlice","name","initialState","hue","active","reducers","changeHue","state","payload","setActive","actions","reducer","buttonPushed","createAction","useStyles","makeStyles","stream","display","isActive","width","border","getStreams","a","constraints","audio","video","facingMode","navigator","mediaDevices","getUserMedia","streams","alert","Stream","classes","videoEl","useRef","useEffect","current","srcObject","openStream","getTracks","forEach","track","console","log","stop","ref","className","playsInline","autoPlay","containerStream","flexDirection","position","flexGrow","alignItems","justifyContent","filter","top","left","height","mixBlendMode","background","slide","sliderContainer","alignSelf","margin","App","dispatch","useDispatch","useSelector","useState","setSlide","onButtonPushed","useCallback","onCloseClick","onClick","Slider","slider","value","onChange","e","pushed","saga","delay","put","takeLatest","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","logger","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b26fdf.chunk.js","sourcesContent":["import {createAction, createSlice} from '@reduxjs/toolkit';\n\nconst VideoSlice = createSlice({\n    name: \"video\",\n    initialState: {\n        hue: 0,\n        active: false\n    },\n    reducers: {\n        changeHue: (state, {payload}) =>{\n            state.hue = payload\n        },\n        setActive: (state, {payload}) => {\n            state.active = payload\n        }\n\n    }\n})\n\nconst {actions, reducer} = VideoSlice;\n\n//custom actions\nexport const buttonPushed = createAction(\"PUSHED\");\n\nexport const {changeHue, setActive} = actions\n\nexport default reducer;","import { makeStyles } from '@material-ui/styles';\nimport React, { useEffect, useRef } from 'react'\n\nconst useStyles = makeStyles({\n    stream: {\n        display: ({isActive}) => (isActive?'block': 'none'),\n        width: '100%',\n        border: '1px solid red',\n      }\n  })\n\nconst getStreams = async () => {\n    const constraints = {\n        audio: false, \n        video: {\n            facingMode: 'environment'\n        }\n    };\n    try {\n        \n        const streams = await navigator.mediaDevices.getUserMedia(constraints);\n        return streams;\n    } catch (error) {\n        alert(error);\n       return null; \n    }   \n}\n\n\nexport default function Stream({isActive}) {\n    const classes = useStyles({isActive});\n    const videoEl = useRef(null);\n    useEffect(() => {\n        if(isActive){\n            const openStream = async () => {\n                const streams = await getStreams();\n                if(videoEl){\n                    videoEl.current.srcObject = streams;\n                }\n            }\n            openStream()\n        }else{\n            if(videoEl.current && videoEl.current.srcObject){\n                videoEl.current.srcObject.getTracks().forEach(function(track) {\n                    console.log(track);\n                    track.stop();\n                })\n                videoEl.current.srcObject = null;\n            }\n        }\n\n        return ()=>{}\n    }, [isActive])\n    \n    return (\n        <video ref={videoEl} className={classes.stream} playsInline autoPlay></video>\n    )\n}\n","import { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport { buttonPushed, setActive } from './slice/VideoSlice';\nimport Stream from './stream/Stream';\nimport { makeStyles } from '@material-ui/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  containerStream: {\n    display: ({isActive})=>(isActive?'flex':'none'),\n    flexDirection: 'column',\n    position: 'relative',\n    width: '100%',\n    flexGrow: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  filter : {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    mixBlendMode: 'multiply',\n    background: ({slide}) => (`hsla(0, ${slide}%, 50%, 1)`),\n  },\n  sliderContainer: {\n    alignSelf: 'center',\n    width: '80%',\n    margin: '1em'\n  }\n})\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isActive = useSelector(state => {\n   return state.active;\n  })\n  const [slide, setSlide] = useState(100);\n\n  const onButtonPushed = useCallback(\n    () => {\n      dispatch(buttonPushed());\n    },\n    [dispatch],\n  )\n  const onCloseClick = useCallback(\n    () => {\n      dispatch(setActive(false));\n    },\n    [dispatch],\n  )\n\n  const classes = useStyles({slide, isActive});\n  return (\n    <>\n    {!isActive && <div className=\"button\" onClick={onButtonPushed} >PUSH</div>}\n    <div className={classes.containerStream}>\n         <Stream isActive={isActive} />\n         {isActive && <>\n        <div className={classes.filter}></div>\n        <div className=\"close\" onClick={onCloseClick}>X</div>\n        <div className={classes.sliderContainer}>\n          <Slider className={classes.slider} value={slide} onChange={(e, value)=>{setSlide(value)}} />\n        </div>\n        </>}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import video from './VideoSlice';\nexport default video;","import {delay, put, takeLatest} from 'redux-saga/effects'\nimport { setActive } from '../slice/VideoSlice';\nfunction* pushed(){\n    yield delay(350);\n    yield put(setActive(true));\n}\n\n\nfunction* saga(){\n    yield takeLatest('PUSHED', pushed)\n}\n\nexport default saga;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger';\nimport  createSagaMiddleware  from 'redux-saga';\nimport './index.css';\nimport App from './App';\nimport reducers from './slice';\nimport saga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: reducers,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware).concat(logger),\n})\n\nsagaMiddleware.run(saga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}