{"version":3,"sources":["slice/VideoSlice.js","stream/Stream.js","App.js","slice/index.js","sagas/index.js","index.js"],"names":["VideoSlice","createSlice","name","initialState","hue","active","reducers","changeHue","state","payload","setActive","actions","reducer","buttonPushed","createAction","getStreams","a","constraints","audio","video","facingMode","navigator","mediaDevices","getUserMedia","streams","cleannnn","getTracks","forEach","track","console","log","stop","Stream","isActive","videoEl","useRef","useEffect","current","srcObject","openStream","ref","className","playsInline","autoPlay","App","dispatch","useDispatch","useSelector","onButtonPushed","useCallback","onCloseClick","onClick","pushed","saga","delay","put","takeLatest","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","logger","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEMA,G,YAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,IAAK,EACLC,QAAQ,GAEZC,SAAU,CACNC,UAAW,SAACC,EAAD,GAAsB,IAAbC,EAAY,EAAZA,QAChBD,EAAMJ,IAAMK,GAEhBC,UAAW,SAACF,EAAD,GAAuB,IAAdC,EAAa,EAAbA,QAChBD,EAAMH,OAASI,OAMpBE,EAAoBX,EAApBW,QAASC,EAAWZ,EAAXY,QAGHC,EAAeC,YAAa,UAEhBJ,GAAaC,EAAxBJ,UAAwBI,EAAbD,WAEVE,I,wBCvBTG,G,MAAU,uCAAG,8BAAAC,EAAA,6DACTC,EAAc,CAChBC,OAAO,EACPC,MAAO,CACHC,WAAY,gBAJL,SAOOC,UAAUC,aAAaC,aAAaN,GAP3C,cAOTO,EAPS,yBAQRA,GARQ,2CAAH,sDAWVC,EAAQ,uCAAG,sBAAAT,EAAA,sEACSD,IADT,cAELW,YAAYC,SAAQ,SAASC,GACjCC,QAAQC,IAAIF,GACZA,EAAMG,UAJG,2CAAH,qDASC,SAASC,EAAT,GAA6B,IAAZC,EAAW,EAAXA,SACtBC,EAAUC,iBAAO,MAwBvB,OAvBAC,qBAAU,WACHH,EACiB,uCAAG,4BAAAjB,EAAA,sEACOD,IADP,OACTS,EADS,OAEZU,IACCA,EAAQG,QAAQC,UAAYd,GAHjB,2CAAH,oDAMhBe,GAEGL,EAAQG,SAAWH,EAAQG,QAAQC,WAClCJ,EAAQG,QAAQC,UAAUZ,YAAYC,SAAQ,SAASC,GACnDC,QAAQC,IAAIF,GACZA,EAAMG,UAKlB,OAAO,WACHN,OAEL,CAACQ,IAGA,uBAAOO,IAAKN,EAASO,UAAS,gBAAYR,EAAoB,GAAT,SAAeS,aAAW,EAACC,UAAQ,ICXjFC,MAhCf,WACE,IAAMC,EAAWC,cACXb,EAAWc,aAAY,SAAAvC,GAC5B,OAAOA,EAAMH,UAGR2C,EAAiBC,uBACrB,WACEJ,EAAShC,OAEX,CAACgC,IAEGK,EAAeD,uBACnB,WACEJ,EAASnC,GAAU,MAErB,CAACmC,IAEH,OACE,sCACEZ,GAAY,qBAAKQ,UAAU,SAASU,QAASH,EAAjC,kBACd,sBAAKP,UAAS,yBAAqBR,EAAoB,GAAT,SAA9C,UACK,cAAC,EAAD,CAAQA,SAAUA,IACjBA,GAAY,qCACd,qBAAKQ,UAAU,WACf,qBAAKA,UAAU,QAAQU,QAASD,EAAhC,yBC9BO/B,I,mBCCLiC,G,WAMAC,GANV,SAAUD,IAAV,iEACI,OADJ,SACUE,YAAM,KADhB,OAEI,OAFJ,SAEUC,YAAI7C,GAAU,IAFxB,uCAMA,SAAU2C,IAAV,iEACI,OADJ,SACUG,YAAW,SAAUJ,GAD/B,uCAIeC,QCDTI,EAAiBC,cAEjBC,EAAQC,YAAe,CAC3BhD,QAASN,EACTuD,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAON,GAAgBM,OAAOC,QAG7FP,EAAeQ,IAAIZ,GAEnBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,W","file":"static/js/main.8c9daec8.chunk.js","sourcesContent":["import {createAction, createSlice} from '@reduxjs/toolkit';\n\nconst VideoSlice = createSlice({\n    name: \"video\",\n    initialState: {\n        hue: 0,\n        active: false\n    },\n    reducers: {\n        changeHue: (state, {payload}) =>{\n            state.hue = payload\n        },\n        setActive: (state, {payload}) => {\n            state.active = payload\n        }\n\n    }\n})\n\nconst {actions, reducer} = VideoSlice;\n\n//custom actions\nexport const buttonPushed = createAction(\"PUSHED\");\n\nexport const {changeHue, setActive} = actions\n\nexport default reducer;","import React, { useEffect, useRef } from 'react'\nimport './Stream.css';\n\nconst getStreams = async () => {\n    const constraints = {\n        audio: false, \n        video: {\n            facingMode: 'environment'\n        }\n    };\n    const streams = await navigator.mediaDevices.getUserMedia(constraints);\n    return streams;\n}\n\nconst cleannnn = async()=>{\n    const streams = await getStreams();\n    streams.getTracks().forEach(function(track) {\n        console.log(track);\n        track.stop();\n    })\n}\n\n\nexport default function Stream({isActive}) {\n    const videoEl = useRef(null);\n    useEffect(() => {\n        if(isActive){\n            const openStream = async () => {\n                const streams = await getStreams();\n                if(videoEl){\n                    videoEl.current.srcObject = streams;\n                }\n            }\n            openStream()\n        }else{\n            if(videoEl.current && videoEl.current.srcObject){\n                videoEl.current.srcObject.getTracks().forEach(function(track) {\n                    console.log(track);\n                    track.stop();\n                })\n            }\n        }\n\n        return ()=>{\n            cleannnn()\n        }\n    }, [isActive])\n    \n    return (\n        <video ref={videoEl} className={`stream${!isActive ? ' hide': ''}`} playsInline autoPlay></video>\n    )\n}\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport { buttonPushed, setActive } from './slice/VideoSlice';\nimport Stream from './stream/Stream';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isActive = useSelector(state => {\n   return state.active;\n  })\n\n  const onButtonPushed = useCallback(\n    () => {\n      dispatch(buttonPushed());\n    },\n    [dispatch],\n  )\n  const onCloseClick = useCallback(\n    () => {\n      dispatch(setActive(false));\n    },\n    [dispatch],\n  )\n  return (\n    <>\n    {!isActive && <div className=\"button\" onClick={onButtonPushed} >PUSH</div>}\n    <div className={`containerStream${!isActive ? ' hide': ''}`}>\n         <Stream isActive={isActive} />\n         {isActive && <>\n        <div className=\"filter\"></div>\n        <div className=\"close\" onClick={onCloseClick}>X</div>\n        </>}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import video from './VideoSlice';\nexport default video;","import {delay, put, takeLatest} from 'redux-saga/effects'\nimport { setActive } from '../slice/VideoSlice';\nfunction* pushed(){\n    yield delay(350);\n    yield put(setActive(true));\n}\n\n\nfunction* saga(){\n    yield takeLatest('PUSHED', pushed)\n}\n\nexport default saga;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger';\nimport  createSagaMiddleware  from 'redux-saga';\nimport './index.css';\nimport App from './App';\nimport reducers from './slice';\nimport saga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: reducers,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware).concat(logger),\n})\n\nsagaMiddleware.run(saga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}